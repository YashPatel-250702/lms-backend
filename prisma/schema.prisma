// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  STUDENT
  TEACHER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

model Users {
  user_id        String     @id @default(uuid())
  name           String
  email          String     @unique
  password       String
  ph_no          String?
  role           Roles
  account_status UserStatus @default(ACTIVE)
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt

  adminProfile   AdminProfile?
  teacherProfile TeacherProfile?
  studentProfile StudentProfile?
  courses        Courses[]
  enrollments    Enrollment[]
  quizResults    QuizResult[]
  workshops      Workshop[]
}

model AdminProfile {
  admin_id          String   @id @default(uuid())
  user_id           String   @unique
  organization_name String

  created_at        DateTime @default(now())
  user              Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model TeacherProfile {
  teacher_id     String   @id @default(uuid())
  user_id        String   @unique
  experience     String?
  specialization String?
  created_at     DateTime @default(now())
  user           Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model StudentProfile {
  student_id  String   @id @default(uuid())
  user_id     String   @unique
  roll_number String
  branch      String
  year        Int
  created_at  DateTime @default(now())
  user        Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  created_at       DateTime @default(now())
  user             Users   @relation(fields: [user_id], references: [user_id],onDelete: Cascade)
}

model TeacherProfile {
  teacher_id       String   @id @default(uuid())
  user_id          String   @unique
  experience       String?
  specialization   String?
  created_at       DateTime @default(now())
  user             Users   @relation(fields: [user_id], references: [user_id],onDelete: Cascade)
}

model StudentProfile {
  student_id       String   @id @default(uuid())
  user_id          String   @unique
  roll_number      String
  branch           String
  year             Int
  created_at       DateTime @default(now())
  user             Users   @relation(fields: [user_id], references: [user_id],onDelete: Cascade)

}

model Courses {
  course_id   String   @id @default(uuid())
  title       String
  description String
  image_url   String
  is_active   Boolean  @default(true)
  teacher_id  String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt


  teacher     Users        @relation(fields: [teacher_id], references: [user_id], onDelete: Cascade)
  modules     Modules[]
  enrollments Enrollment[]
  teacher         Users   @relation(fields: [teacher_id], references: [user_id],onDelete: Cascade)
  modules         Modules[]
  enrollments     Enrollment[]

}

model Modules {
  module_id    String @id @default(uuid())
  course_id    String
  title        String
  module_index Int
  course   Courses         @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  contents ModuleContent[]
  Quiz     Quiz[]
}

model ModuleContent {
  content_id String  @id @default(uuid())
  pdf_url    String
  video_url  String?
  title      String
  duration   String
  module_id  String

  module Modules @relation(fields: [module_id], references: [module_id], onDelete: Cascade)
  course        Courses          @relation(fields: [course_id], references: [course_id],onDelete: Cascade)
  contents      ModuleContent[]  
  Quiz          Quiz[]
}

model ModuleContent {
  content_id   String   @id @default(uuid())
  pdf_url      String
  video_url    String?
  title        String
  duration     String
  module_id    String

  module       Modules  @relation(fields: [module_id], references: [module_id],onDelete: Cascade)  

}

model Quiz {
  quiz_id             String               @id @default(uuid())
  module_id           String
  quiz_name           String
  duration            String
  number_of_questions Int
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  module              Modules              @relation(fields: [module_id], references: [module_id], onDelete: Cascade)
  questionAndAnswers  QuestionAndAnswers[]
  quizResults         QuizResult[]
}

model QuestionAndAnswers {
  question_id String @id @default(uuid())
  quiz_id     String
  question    String
  options     Json
  answer      String
  quiz        Quiz   @relation(fields: [quiz_id], references: [quiz_id], onDelete: Cascade)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  module          Modules @relation(fields: [module_id], references: [module_id],onDelete: Cascade)
  questionAndAnswers QuestionAndAnswers[]
  quizResults     QuizResult[]
}

model QuestionAndAnswers {
  question_id     String   @id @default(uuid())
  quiz_id         String
  question        String
  options         Json
  answer          String
  quiz            Quiz @relation(fields: [quiz_id], references: [quiz_id],onDelete: Cascade)
}

model QuizResult {
  result_id       String   @id @default(uuid())
  quiz_id         String
  student_id      String
  score           Int
  total_questions Int
  correct_answers Int
  attempted_at    DateTime @default(now())
  quiz            Quiz     @relation(fields: [quiz_id], references: [quiz_id], onDelete: Cascade)
  student         Users    @relation(fields: [student_id], references: [user_id], onDelete: Cascade)
}

model Enrollment {
  enrollment_id String   @id @default(uuid())
  student_id    String
  course_id     String
  enrolled_at   DateTime @default(now())
  student       Users    @relation(fields: [student_id], references: [user_id], onDelete: Cascade)
  course        Courses  @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
}

model Workshop {
  workshop_id  String         @id @default(uuid())
  teacher_id    String
  title        String
  description  String
  startTime    DateTime
  endTime      DateTime
  meetingLink  String
  resourceLink String
  status       WorkshopStatus
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt

  teacher Users @relation(fields: [teacher_id], references: [user_id], onDelete: Cascade)
}

enum WorkshopStatus {
  REQUESTED_CREATION
  REQUESTED_DELETION
  APPROVED
  REJECTED_CREATION
  REJECTED_DELETION
  quiz            Quiz @relation(fields: [quiz_id], references: [quiz_id],onDelete: Cascade)
  student         Users @relation(fields: [student_id], references: [user_id],onDelete: Cascade)
}

model Enrollment {
  enrollment_id   String   @id @default(uuid())
  student_id      String
  course_id       String
  enrolled_at     DateTime @default(now())
  student         Users @relation(fields: [student_id], references: [user_id],onDelete: Cascade)
  course          Courses @relation(fields: [course_id], references: [course_id],onDelete: Cascade)

}
